// Generated by @wagmi/cli@0.1.11 on 2023. 03. 11. at 15:21:22
import {
    useContract,
    UseContractConfig,
    useContractRead,
    UseContractReadConfig,
    useContractWrite,
    UseContractWriteConfig,
    usePrepareContractWrite,
    UsePrepareContractWriteConfig,
    useContractEvent,
    UseContractEventConfig,
} from "wagmi";
import { ReadContractResult, WriteContractMode, PrepareWriteContractResult } from "wagmi/actions";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ChainPass
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const chainPassABI = [
    { stateMutability: "nonpayable", type: "constructor", inputs: [] },
    {
        type: "event",
        anonymous: false,
        inputs: [
            { name: "from", internalType: "address", type: "address", indexed: true },
            {
                name: "credential",
                internalType: "string",
                type: "string",
                indexed: false,
            },
        ],
        name: "AddCredential",
    },
    {
        type: "event",
        anonymous: false,
        inputs: [
            {
                name: "previousAdmin",
                internalType: "address",
                type: "address",
                indexed: false,
            },
            {
                name: "newAdmin",
                internalType: "address",
                type: "address",
                indexed: false,
            },
        ],
        name: "AdminChanged",
    },
    {
        type: "event",
        anonymous: false,
        inputs: [
            {
                name: "owner",
                internalType: "address",
                type: "address",
                indexed: true,
            },
            {
                name: "spender",
                internalType: "address",
                type: "address",
                indexed: true,
            },
            {
                name: "value",
                internalType: "uint256",
                type: "uint256",
                indexed: false,
            },
        ],
        name: "Approval",
    },
    {
        type: "event",
        anonymous: false,
        inputs: [
            {
                name: "beacon",
                internalType: "address",
                type: "address",
                indexed: true,
            },
        ],
        name: "BeaconUpgraded",
    },
    {
        type: "event",
        anonymous: false,
        inputs: [{ name: "version", internalType: "uint8", type: "uint8", indexed: false }],
        name: "Initialized",
    },
    {
        type: "event",
        anonymous: false,
        inputs: [
            {
                name: "previousOwner",
                internalType: "address",
                type: "address",
                indexed: true,
            },
            {
                name: "newOwner",
                internalType: "address",
                type: "address",
                indexed: true,
            },
        ],
        name: "OwnershipTransferred",
    },
    {
        type: "event",
        anonymous: false,
        inputs: [
            { name: "from", internalType: "address", type: "address", indexed: true },
            { name: "to", internalType: "address", type: "address", indexed: true },
            {
                name: "value",
                internalType: "uint256",
                type: "uint256",
                indexed: false,
            },
        ],
        name: "Transfer",
    },
    {
        type: "event",
        anonymous: false,
        inputs: [
            {
                name: "implementation",
                internalType: "address",
                type: "address",
                indexed: true,
            },
        ],
        name: "Upgraded",
    },
    {
        constant: true,
        stateMutability: "view",
        type: "function",
        inputs: [
            { name: "owner", internalType: "address", type: "address" },
            { name: "spender", internalType: "address", type: "address" },
        ],
        name: "allowance",
        outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    },
    {
        stateMutability: "nonpayable",
        type: "function",
        inputs: [
            { name: "spender", internalType: "address", type: "address" },
            { name: "amount", internalType: "uint256", type: "uint256" },
        ],
        name: "approve",
        outputs: [{ name: "", internalType: "bool", type: "bool" }],
    },
    {
        constant: true,
        stateMutability: "view",
        type: "function",
        inputs: [{ name: "account", internalType: "address", type: "address" }],
        name: "balanceOf",
        outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    },
    {
        constant: true,
        stateMutability: "view",
        type: "function",
        inputs: [],
        name: "decimals",
        outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
    },
    {
        stateMutability: "nonpayable",
        type: "function",
        inputs: [
            { name: "spender", internalType: "address", type: "address" },
            { name: "subtractedValue", internalType: "uint256", type: "uint256" },
        ],
        name: "decreaseAllowance",
        outputs: [{ name: "", internalType: "bool", type: "bool" }],
    },
    {
        constant: true,
        stateMutability: "view",
        type: "function",
        inputs: [],
        name: "developerTax",
        outputs: [{ name: "", internalType: "uint16", type: "uint16" }],
    },
    {
        constant: true,
        stateMutability: "view",
        type: "function",
        inputs: [],
        name: "developerWallet",
        outputs: [{ name: "", internalType: "address", type: "address" }],
    },
    {
        stateMutability: "nonpayable",
        type: "function",
        inputs: [
            { name: "spender", internalType: "address", type: "address" },
            { name: "addedValue", internalType: "uint256", type: "uint256" },
        ],
        name: "increaseAllowance",
        outputs: [{ name: "", internalType: "bool", type: "bool" }],
    },
    {
        constant: true,
        stateMutability: "view",
        type: "function",
        inputs: [],
        name: "marketingTax",
        outputs: [{ name: "", internalType: "uint16", type: "uint16" }],
    },
    {
        constant: true,
        stateMutability: "view",
        type: "function",
        inputs: [],
        name: "marketingWallet",
        outputs: [{ name: "", internalType: "address", type: "address" }],
    },
    {
        constant: true,
        stateMutability: "view",
        type: "function",
        inputs: [],
        name: "name",
        outputs: [{ name: "", internalType: "string", type: "string" }],
    },
    {
        constant: true,
        stateMutability: "view",
        type: "function",
        inputs: [],
        name: "owner",
        outputs: [{ name: "", internalType: "address", type: "address" }],
    },
    {
        constant: true,
        stateMutability: "view",
        type: "function",
        inputs: [],
        name: "proxiableUUID",
        outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
    },
    {
        stateMutability: "nonpayable",
        type: "function",
        inputs: [],
        name: "renounceOwnership",
        outputs: [],
    },
    {
        constant: true,
        stateMutability: "view",
        type: "function",
        inputs: [],
        name: "symbol",
        outputs: [{ name: "", internalType: "string", type: "string" }],
    },
    {
        constant: true,
        stateMutability: "view",
        type: "function",
        inputs: [],
        name: "totalSupply",
        outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    },
    {
        stateMutability: "nonpayable",
        type: "function",
        inputs: [
            { name: "to", internalType: "address", type: "address" },
            { name: "amount", internalType: "uint256", type: "uint256" },
        ],
        name: "transfer",
        outputs: [{ name: "", internalType: "bool", type: "bool" }],
    },
    {
        stateMutability: "nonpayable",
        type: "function",
        inputs: [
            { name: "from", internalType: "address", type: "address" },
            { name: "to", internalType: "address", type: "address" },
            { name: "amount", internalType: "uint256", type: "uint256" },
        ],
        name: "transferFrom",
        outputs: [{ name: "", internalType: "bool", type: "bool" }],
    },
    {
        stateMutability: "nonpayable",
        type: "function",
        inputs: [{ name: "newOwner", internalType: "address", type: "address" }],
        name: "transferOwnership",
        outputs: [],
    },
    {
        stateMutability: "nonpayable",
        type: "function",
        inputs: [{ name: "newImplementation", internalType: "address", type: "address" }],
        name: "upgradeTo",
        outputs: [],
    },
    {
        payable: true,
        stateMutability: "payable",
        type: "function",
        inputs: [
            { name: "newImplementation", internalType: "address", type: "address" },
            { name: "data", internalType: "bytes", type: "bytes" },
        ],
        name: "upgradeToAndCall",
        outputs: [],
    },
    {
        constant: true,
        stateMutability: "view",
        type: "function",
        inputs: [],
        name: "usageFee",
        outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    },
    {
        stateMutability: "nonpayable",
        type: "function",
        inputs: [],
        name: "initialize",
        outputs: [],
    },
    {
        payable: true,
        stateMutability: "payable",
        type: "function",
        inputs: [{ name: "credential_", internalType: "string", type: "string" }],
        name: "addCredential",
        outputs: [],
    },
    {
        stateMutability: "nonpayable",
        type: "function",
        inputs: [{ name: "usageFee_", internalType: "uint256", type: "uint256" }],
        name: "setUsageFee",
        outputs: [],
    },
    {
        constant: true,
        stateMutability: "view",
        type: "function",
        inputs: [{ name: "from_", internalType: "address", type: "address" }],
        name: "getCredentialBlocks",
        outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
    },
] as const;

export const chainPassAddress = "0x0b273A383cCF2c8174d4E39F3536Cf492B6e5Ae9" as const;

export const chainPassConfig = {
    address: chainPassAddress,
    abi: chainPassABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link chainPassABI}__.
 */
export function useChainPass(config: Omit<UseContractConfig, "abi" | "address"> = {} as any) {
    return useContract({
        abi: chainPassABI,
        address: chainPassAddress,
        ...config,
    });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link chainPassABI}__.
 */
export function useChainPassRead<TFunctionName extends string, TSelectData = ReadContractResult<typeof chainPassABI, TFunctionName>>(
    config: Omit<UseContractReadConfig<typeof chainPassABI, TFunctionName, TSelectData>, "abi" | "address"> = {} as any,
) {
    return useContractRead({
        abi: chainPassABI,
        address: chainPassAddress,
        ...config,
    } as UseContractReadConfig<typeof chainPassABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"allowance"`.
 */
export function useChainPassAllowance<TSelectData = ReadContractResult<typeof chainPassABI, "allowance">,>(
    config: Omit<UseContractReadConfig<typeof chainPassABI, "allowance", TSelectData>, "abi" | "address" | "functionName"> = {} as any,
) {
    return useContractRead({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "allowance",
        ...config,
    } as UseContractReadConfig<typeof chainPassABI, "allowance", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useChainPassBalanceOf<TSelectData = ReadContractResult<typeof chainPassABI, "balanceOf">,>(
    config: Omit<UseContractReadConfig<typeof chainPassABI, "balanceOf", TSelectData>, "abi" | "address" | "functionName"> = {} as any,
) {
    return useContractRead({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "balanceOf",
        ...config,
    } as UseContractReadConfig<typeof chainPassABI, "balanceOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"decimals"`.
 */
export function useChainPassDecimals<TSelectData = ReadContractResult<typeof chainPassABI, "decimals">,>(
    config: Omit<UseContractReadConfig<typeof chainPassABI, "decimals", TSelectData>, "abi" | "address" | "functionName"> = {} as any,
) {
    return useContractRead({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "decimals",
        ...config,
    } as UseContractReadConfig<typeof chainPassABI, "decimals", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"developerTax"`.
 */
export function useChainPassDeveloperTax<TSelectData = ReadContractResult<typeof chainPassABI, "developerTax">,>(
    config: Omit<UseContractReadConfig<typeof chainPassABI, "developerTax", TSelectData>, "abi" | "address" | "functionName"> = {} as any,
) {
    return useContractRead({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "developerTax",
        ...config,
    } as UseContractReadConfig<typeof chainPassABI, "developerTax", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"developerWallet"`.
 */
export function useChainPassDeveloperWallet<TSelectData = ReadContractResult<typeof chainPassABI, "developerWallet">,>(
    config: Omit<UseContractReadConfig<typeof chainPassABI, "developerWallet", TSelectData>, "abi" | "address" | "functionName"> = {} as any,
) {
    return useContractRead({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "developerWallet",
        ...config,
    } as UseContractReadConfig<typeof chainPassABI, "developerWallet", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"marketingTax"`.
 */
export function useChainPassMarketingTax<TSelectData = ReadContractResult<typeof chainPassABI, "marketingTax">,>(
    config: Omit<UseContractReadConfig<typeof chainPassABI, "marketingTax", TSelectData>, "abi" | "address" | "functionName"> = {} as any,
) {
    return useContractRead({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "marketingTax",
        ...config,
    } as UseContractReadConfig<typeof chainPassABI, "marketingTax", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"marketingWallet"`.
 */
export function useChainPassMarketingWallet<TSelectData = ReadContractResult<typeof chainPassABI, "marketingWallet">,>(
    config: Omit<UseContractReadConfig<typeof chainPassABI, "marketingWallet", TSelectData>, "abi" | "address" | "functionName"> = {} as any,
) {
    return useContractRead({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "marketingWallet",
        ...config,
    } as UseContractReadConfig<typeof chainPassABI, "marketingWallet", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"name"`.
 */
export function useChainPassName<TSelectData = ReadContractResult<typeof chainPassABI, "name">,>(
    config: Omit<UseContractReadConfig<typeof chainPassABI, "name", TSelectData>, "abi" | "address" | "functionName"> = {} as any,
) {
    return useContractRead({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "name",
        ...config,
    } as UseContractReadConfig<typeof chainPassABI, "name", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"owner"`.
 */
export function useChainPassOwner<TSelectData = ReadContractResult<typeof chainPassABI, "owner">,>(
    config: Omit<UseContractReadConfig<typeof chainPassABI, "owner", TSelectData>, "abi" | "address" | "functionName"> = {} as any,
) {
    return useContractRead({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "owner",
        ...config,
    } as UseContractReadConfig<typeof chainPassABI, "owner", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useChainPassProxiableUuid<TSelectData = ReadContractResult<typeof chainPassABI, "proxiableUUID">,>(
    config: Omit<UseContractReadConfig<typeof chainPassABI, "proxiableUUID", TSelectData>, "abi" | "address" | "functionName"> = {} as any,
) {
    return useContractRead({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "proxiableUUID",
        ...config,
    } as UseContractReadConfig<typeof chainPassABI, "proxiableUUID", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"symbol"`.
 */
export function useChainPassSymbol<TSelectData = ReadContractResult<typeof chainPassABI, "symbol">,>(
    config: Omit<UseContractReadConfig<typeof chainPassABI, "symbol", TSelectData>, "abi" | "address" | "functionName"> = {} as any,
) {
    return useContractRead({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "symbol",
        ...config,
    } as UseContractReadConfig<typeof chainPassABI, "symbol", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useChainPassTotalSupply<TSelectData = ReadContractResult<typeof chainPassABI, "totalSupply">,>(
    config: Omit<UseContractReadConfig<typeof chainPassABI, "totalSupply", TSelectData>, "abi" | "address" | "functionName"> = {} as any,
) {
    return useContractRead({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "totalSupply",
        ...config,
    } as UseContractReadConfig<typeof chainPassABI, "totalSupply", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"usageFee"`.
 */
export function useChainPassUsageFee<TSelectData = ReadContractResult<typeof chainPassABI, "usageFee">,>(
    config: Omit<UseContractReadConfig<typeof chainPassABI, "usageFee", TSelectData>, "abi" | "address" | "functionName"> = {} as any,
) {
    return useContractRead({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "usageFee",
        ...config,
    } as UseContractReadConfig<typeof chainPassABI, "usageFee", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"getCredentialBlocks"`.
 */
export function useChainPassGetCredentialBlocks<TSelectData = ReadContractResult<typeof chainPassABI, "getCredentialBlocks">,>(
    config: Omit<UseContractReadConfig<typeof chainPassABI, "getCredentialBlocks", TSelectData>, "abi" | "address" | "functionName"> = {} as any,
) {
    return useContractRead({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "getCredentialBlocks",
        ...config,
    } as UseContractReadConfig<typeof chainPassABI, "getCredentialBlocks", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link chainPassABI}__.
 */
export function useChainPassWrite<TMode extends WriteContractMode, TFunctionName extends string>(
    config: TMode extends "prepared"
        ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof chainPassABI, string>["abi"], TFunctionName>
        : UseContractWriteConfig<TMode, typeof chainPassABI, TFunctionName> & {
              abi?: never;
          } = {} as any,
) {
    return useContractWrite<TMode, typeof chainPassABI, TFunctionName>({
        abi: chainPassABI,
        address: chainPassAddress,
        ...config,
    } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"approve"`.
 */
export function useChainPassApprove<TMode extends WriteContractMode>(
    config: TMode extends "prepared"
        ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof chainPassABI, "approve">["abi"], "approve"> & { functionName?: "approve" }
        : UseContractWriteConfig<TMode, typeof chainPassABI, "approve"> & {
              abi?: never;
              functionName?: "approve";
          } = {} as any,
) {
    return useContractWrite<TMode, typeof chainPassABI, "approve">({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "approve",
        ...config,
    } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useChainPassDecreaseAllowance<TMode extends WriteContractMode>(
    config: TMode extends "prepared"
        ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof chainPassABI, "decreaseAllowance">["abi"], "decreaseAllowance"> & {
              functionName?: "decreaseAllowance";
          }
        : UseContractWriteConfig<TMode, typeof chainPassABI, "decreaseAllowance"> & {
              abi?: never;
              functionName?: "decreaseAllowance";
          } = {} as any,
) {
    return useContractWrite<TMode, typeof chainPassABI, "decreaseAllowance">({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "decreaseAllowance",
        ...config,
    } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useChainPassIncreaseAllowance<TMode extends WriteContractMode>(
    config: TMode extends "prepared"
        ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof chainPassABI, "increaseAllowance">["abi"], "increaseAllowance"> & {
              functionName?: "increaseAllowance";
          }
        : UseContractWriteConfig<TMode, typeof chainPassABI, "increaseAllowance"> & {
              abi?: never;
              functionName?: "increaseAllowance";
          } = {} as any,
) {
    return useContractWrite<TMode, typeof chainPassABI, "increaseAllowance">({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "increaseAllowance",
        ...config,
    } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function useChainPassRenounceOwnership<TMode extends WriteContractMode>(
    config: TMode extends "prepared"
        ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof chainPassABI, "renounceOwnership">["abi"], "renounceOwnership"> & {
              functionName?: "renounceOwnership";
          }
        : UseContractWriteConfig<TMode, typeof chainPassABI, "renounceOwnership"> & {
              abi?: never;
              functionName?: "renounceOwnership";
          } = {} as any,
) {
    return useContractWrite<TMode, typeof chainPassABI, "renounceOwnership">({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "renounceOwnership",
        ...config,
    } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"transfer"`.
 */
export function useChainPassTransfer<TMode extends WriteContractMode>(
    config: TMode extends "prepared"
        ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof chainPassABI, "transfer">["abi"], "transfer"> & { functionName?: "transfer" }
        : UseContractWriteConfig<TMode, typeof chainPassABI, "transfer"> & {
              abi?: never;
              functionName?: "transfer";
          } = {} as any,
) {
    return useContractWrite<TMode, typeof chainPassABI, "transfer">({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "transfer",
        ...config,
    } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useChainPassTransferFrom<TMode extends WriteContractMode>(
    config: TMode extends "prepared"
        ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof chainPassABI, "transferFrom">["abi"], "transferFrom"> & {
              functionName?: "transferFrom";
          }
        : UseContractWriteConfig<TMode, typeof chainPassABI, "transferFrom"> & {
              abi?: never;
              functionName?: "transferFrom";
          } = {} as any,
) {
    return useContractWrite<TMode, typeof chainPassABI, "transferFrom">({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "transferFrom",
        ...config,
    } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function useChainPassTransferOwnership<TMode extends WriteContractMode>(
    config: TMode extends "prepared"
        ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof chainPassABI, "transferOwnership">["abi"], "transferOwnership"> & {
              functionName?: "transferOwnership";
          }
        : UseContractWriteConfig<TMode, typeof chainPassABI, "transferOwnership"> & {
              abi?: never;
              functionName?: "transferOwnership";
          } = {} as any,
) {
    return useContractWrite<TMode, typeof chainPassABI, "transferOwnership">({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "transferOwnership",
        ...config,
    } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useChainPassUpgradeTo<TMode extends WriteContractMode>(
    config: TMode extends "prepared"
        ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof chainPassABI, "upgradeTo">["abi"], "upgradeTo"> & { functionName?: "upgradeTo" }
        : UseContractWriteConfig<TMode, typeof chainPassABI, "upgradeTo"> & {
              abi?: never;
              functionName?: "upgradeTo";
          } = {} as any,
) {
    return useContractWrite<TMode, typeof chainPassABI, "upgradeTo">({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "upgradeTo",
        ...config,
    } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useChainPassUpgradeToAndCall<TMode extends WriteContractMode>(
    config: TMode extends "prepared"
        ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof chainPassABI, "upgradeToAndCall">["abi"], "upgradeToAndCall"> & {
              functionName?: "upgradeToAndCall";
          }
        : UseContractWriteConfig<TMode, typeof chainPassABI, "upgradeToAndCall"> & {
              abi?: never;
              functionName?: "upgradeToAndCall";
          } = {} as any,
) {
    return useContractWrite<TMode, typeof chainPassABI, "upgradeToAndCall">({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "upgradeToAndCall",
        ...config,
    } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"initialize"`.
 */
export function useChainPassInitialize<TMode extends WriteContractMode>(
    config: TMode extends "prepared"
        ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof chainPassABI, "initialize">["abi"], "initialize"> & { functionName?: "initialize" }
        : UseContractWriteConfig<TMode, typeof chainPassABI, "initialize"> & {
              abi?: never;
              functionName?: "initialize";
          } = {} as any,
) {
    return useContractWrite<TMode, typeof chainPassABI, "initialize">({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "initialize",
        ...config,
    } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"addCredential"`.
 */
export function useChainPassAddCredential<TMode extends WriteContractMode>(
    config: TMode extends "prepared"
        ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof chainPassABI, "addCredential">["abi"], "addCredential"> & {
              functionName?: "addCredential";
          }
        : UseContractWriteConfig<TMode, typeof chainPassABI, "addCredential"> & {
              abi?: never;
              functionName?: "addCredential";
          } = {} as any,
) {
    return useContractWrite<TMode, typeof chainPassABI, "addCredential">({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "addCredential",
        ...config,
    } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"setUsageFee"`.
 */
export function useChainPassSetUsageFee<TMode extends WriteContractMode>(
    config: TMode extends "prepared"
        ? UseContractWriteConfig<TMode, PrepareWriteContractResult<typeof chainPassABI, "setUsageFee">["abi"], "setUsageFee"> & { functionName?: "setUsageFee" }
        : UseContractWriteConfig<TMode, typeof chainPassABI, "setUsageFee"> & {
              abi?: never;
              functionName?: "setUsageFee";
          } = {} as any,
) {
    return useContractWrite<TMode, typeof chainPassABI, "setUsageFee">({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "setUsageFee",
        ...config,
    } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link chainPassABI}__.
 */
export function usePrepareChainPassWrite<TFunctionName extends string>(
    config: Omit<UsePrepareContractWriteConfig<typeof chainPassABI, TFunctionName>, "abi" | "address"> = {} as any,
) {
    return usePrepareContractWrite({
        abi: chainPassABI,
        address: chainPassAddress,
        ...config,
    } as UsePrepareContractWriteConfig<typeof chainPassABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareChainPassApprove(
    config: Omit<UsePrepareContractWriteConfig<typeof chainPassABI, "approve">, "abi" | "address" | "functionName"> = {} as any,
) {
    return usePrepareContractWrite({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "approve",
        ...config,
    } as UsePrepareContractWriteConfig<typeof chainPassABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareChainPassDecreaseAllowance(
    config: Omit<UsePrepareContractWriteConfig<typeof chainPassABI, "decreaseAllowance">, "abi" | "address" | "functionName"> = {} as any,
) {
    return usePrepareContractWrite({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "decreaseAllowance",
        ...config,
    } as UsePrepareContractWriteConfig<typeof chainPassABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareChainPassIncreaseAllowance(
    config: Omit<UsePrepareContractWriteConfig<typeof chainPassABI, "increaseAllowance">, "abi" | "address" | "functionName"> = {} as any,
) {
    return usePrepareContractWrite({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "increaseAllowance",
        ...config,
    } as UsePrepareContractWriteConfig<typeof chainPassABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"renounceOwnership"`.
 */
export function usePrepareChainPassRenounceOwnership(
    config: Omit<UsePrepareContractWriteConfig<typeof chainPassABI, "renounceOwnership">, "abi" | "address" | "functionName"> = {} as any,
) {
    return usePrepareContractWrite({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "renounceOwnership",
        ...config,
    } as UsePrepareContractWriteConfig<typeof chainPassABI, "renounceOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareChainPassTransfer(
    config: Omit<UsePrepareContractWriteConfig<typeof chainPassABI, "transfer">, "abi" | "address" | "functionName"> = {} as any,
) {
    return usePrepareContractWrite({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "transfer",
        ...config,
    } as UsePrepareContractWriteConfig<typeof chainPassABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareChainPassTransferFrom(
    config: Omit<UsePrepareContractWriteConfig<typeof chainPassABI, "transferFrom">, "abi" | "address" | "functionName"> = {} as any,
) {
    return usePrepareContractWrite({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "transferFrom",
        ...config,
    } as UsePrepareContractWriteConfig<typeof chainPassABI, "transferFrom">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"transferOwnership"`.
 */
export function usePrepareChainPassTransferOwnership(
    config: Omit<UsePrepareContractWriteConfig<typeof chainPassABI, "transferOwnership">, "abi" | "address" | "functionName"> = {} as any,
) {
    return usePrepareContractWrite({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "transferOwnership",
        ...config,
    } as UsePrepareContractWriteConfig<typeof chainPassABI, "transferOwnership">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareChainPassUpgradeTo(
    config: Omit<UsePrepareContractWriteConfig<typeof chainPassABI, "upgradeTo">, "abi" | "address" | "functionName"> = {} as any,
) {
    return usePrepareContractWrite({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "upgradeTo",
        ...config,
    } as UsePrepareContractWriteConfig<typeof chainPassABI, "upgradeTo">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareChainPassUpgradeToAndCall(
    config: Omit<UsePrepareContractWriteConfig<typeof chainPassABI, "upgradeToAndCall">, "abi" | "address" | "functionName"> = {} as any,
) {
    return usePrepareContractWrite({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "upgradeToAndCall",
        ...config,
    } as UsePrepareContractWriteConfig<typeof chainPassABI, "upgradeToAndCall">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareChainPassInitialize(
    config: Omit<UsePrepareContractWriteConfig<typeof chainPassABI, "initialize">, "abi" | "address" | "functionName"> = {} as any,
) {
    return usePrepareContractWrite({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "initialize",
        ...config,
    } as UsePrepareContractWriteConfig<typeof chainPassABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"addCredential"`.
 */
export function usePrepareChainPassAddCredential(
    config: Omit<UsePrepareContractWriteConfig<typeof chainPassABI, "addCredential">, "abi" | "address" | "functionName"> = {} as any,
) {
    return usePrepareContractWrite({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "addCredential",
        ...config,
    } as UsePrepareContractWriteConfig<typeof chainPassABI, "addCredential">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link chainPassABI}__ and `functionName` set to `"setUsageFee"`.
 */
export function usePrepareChainPassSetUsageFee(
    config: Omit<UsePrepareContractWriteConfig<typeof chainPassABI, "setUsageFee">, "abi" | "address" | "functionName"> = {} as any,
) {
    return usePrepareContractWrite({
        abi: chainPassABI,
        address: chainPassAddress,
        functionName: "setUsageFee",
        ...config,
    } as UsePrepareContractWriteConfig<typeof chainPassABI, "setUsageFee">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link chainPassABI}__.
 */
export function useChainPassEvent<TEventName extends string>(
    config: Omit<UseContractEventConfig<typeof chainPassABI, TEventName>, "abi" | "address"> = {} as any,
) {
    return useContractEvent({
        abi: chainPassABI,
        address: chainPassAddress,
        ...config,
    } as UseContractEventConfig<typeof chainPassABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link chainPassABI}__ and `eventName` set to `"AddCredential"`.
 */
export function useChainPassAddCredentialEvent(
    config: Omit<UseContractEventConfig<typeof chainPassABI, "AddCredential">, "abi" | "address" | "eventName"> = {} as any,
) {
    return useContractEvent({
        abi: chainPassABI,
        address: chainPassAddress,
        eventName: "AddCredential",
        ...config,
    } as UseContractEventConfig<typeof chainPassABI, "AddCredential">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link chainPassABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useChainPassAdminChangedEvent(
    config: Omit<UseContractEventConfig<typeof chainPassABI, "AdminChanged">, "abi" | "address" | "eventName"> = {} as any,
) {
    return useContractEvent({
        abi: chainPassABI,
        address: chainPassAddress,
        eventName: "AdminChanged",
        ...config,
    } as UseContractEventConfig<typeof chainPassABI, "AdminChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link chainPassABI}__ and `eventName` set to `"Approval"`.
 */
export function useChainPassApprovalEvent(config: Omit<UseContractEventConfig<typeof chainPassABI, "Approval">, "abi" | "address" | "eventName"> = {} as any) {
    return useContractEvent({
        abi: chainPassABI,
        address: chainPassAddress,
        eventName: "Approval",
        ...config,
    } as UseContractEventConfig<typeof chainPassABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link chainPassABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useChainPassBeaconUpgradedEvent(
    config: Omit<UseContractEventConfig<typeof chainPassABI, "BeaconUpgraded">, "abi" | "address" | "eventName"> = {} as any,
) {
    return useContractEvent({
        abi: chainPassABI,
        address: chainPassAddress,
        eventName: "BeaconUpgraded",
        ...config,
    } as UseContractEventConfig<typeof chainPassABI, "BeaconUpgraded">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link chainPassABI}__ and `eventName` set to `"Initialized"`.
 */
export function useChainPassInitializedEvent(
    config: Omit<UseContractEventConfig<typeof chainPassABI, "Initialized">, "abi" | "address" | "eventName"> = {} as any,
) {
    return useContractEvent({
        abi: chainPassABI,
        address: chainPassAddress,
        eventName: "Initialized",
        ...config,
    } as UseContractEventConfig<typeof chainPassABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link chainPassABI}__ and `eventName` set to `"OwnershipTransferred"`.
 */
export function useChainPassOwnershipTransferredEvent(
    config: Omit<UseContractEventConfig<typeof chainPassABI, "OwnershipTransferred">, "abi" | "address" | "eventName"> = {} as any,
) {
    return useContractEvent({
        abi: chainPassABI,
        address: chainPassAddress,
        eventName: "OwnershipTransferred",
        ...config,
    } as UseContractEventConfig<typeof chainPassABI, "OwnershipTransferred">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link chainPassABI}__ and `eventName` set to `"Transfer"`.
 */
export function useChainPassTransferEvent(config: Omit<UseContractEventConfig<typeof chainPassABI, "Transfer">, "abi" | "address" | "eventName"> = {} as any) {
    return useContractEvent({
        abi: chainPassABI,
        address: chainPassAddress,
        eventName: "Transfer",
        ...config,
    } as UseContractEventConfig<typeof chainPassABI, "Transfer">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link chainPassABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useChainPassUpgradedEvent(config: Omit<UseContractEventConfig<typeof chainPassABI, "Upgraded">, "abi" | "address" | "eventName"> = {} as any) {
    return useContractEvent({
        abi: chainPassABI,
        address: chainPassAddress,
        eventName: "Upgraded",
        ...config,
    } as UseContractEventConfig<typeof chainPassABI, "Upgraded">);
}
